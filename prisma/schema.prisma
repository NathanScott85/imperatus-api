datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id          Int            @id @default(autoincrement())
  url         String
  key         String
  fileName    String         @unique
  contentType String
  createdAt   DateTime       @default(now())
  category    Category?      @relation("CategoryImage")
  product     Product?       @relation("ProductImage")
  brand       ProductBrands? @relation("BrandImage")
}

model CategoryType {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  categories Category[]
}

model Category {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String
  imgId          Int?         @unique
  products       Product[]    @relation("CategoryProducts")
  img            File?        @relation("CategoryImage", fields: [imgId], references: [id])
  categoryTypeId Int          @default(autoincrement())
  type           CategoryType @relation(fields: [categoryTypeId], references: [id])
}

model ProductType {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model ProductBrands {
  id          Int       @id @default(autoincrement())
  imgId       Int?      @unique
  name        String    @unique
  description String
  img         File?     @relation("BrandImage", fields: [imgId], references: [id])
  product     Product[]
}

model ProductSet {
  id          Int       @id @default(autoincrement())
  setName     String    @unique
  setCode     String    @unique
  description String
  product     Product[]
}

model Product {
  id            Int           @id @default(autoincrement())
  categoryId    Int
  brandId       Int
  setId         Int
  imgId         Int?          @unique
  name          String
  price         Decimal?      @db.Decimal(10, 2)
  type          ProductType   @relation(fields: [productTypeId], references: [id])
  brand         ProductBrands @relation(fields: [brandId], references: [id])
  set           ProductSet    @relation(fields: [setId], references: [id])
  preorder      Boolean?
  rrp           Decimal?      @db.Decimal(10, 2)
  description   String
  category      Category      @relation("CategoryProducts", fields: [categoryId], references: [id])
  img           File?         @relation("ProductImage", fields: [imgId], references: [id])
  stock         Stock?        @relation("ProductStock")
  productTypeId Int

  @@map("products")
}

model Stock {
  id        Int     @id @default(autoincrement())
  amount    Int
  sold      Int
  instock   String
  soldout   String
  preorder  Boolean
  product   Product @relation("ProductStock", fields: [productId], references: [id])
  productId Int     @unique
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  fullname                String
  password                String
  dob                     DateTime
  phone                   String
  address                 String
  city                    String
  postcode                String
  resetToken              String?
  resetTokenExpiry        DateTime?
  emailVerified           Boolean                  @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  userRoles               UserRole[]               @relation("UserRoles")
  refreshToken            String?
  refreshTokenExpiry      DateTime?
  storeCredit             Float                    @default(0.0)
  transactions            StoreCreditTransaction[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[] @relation("UserRoles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation("UserRoles", fields: [userId], references: [id])
  role   Role @relation("UserRoles", fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model StoreCreditTransaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  date         DateTime
  time         String
  type         String
  amount       Decimal  @db.Decimal(10, 2)
  balanceAfter Decimal  @db.Decimal(10, 2)
  User         User     @relation(fields: [userId], references: [id])
}
