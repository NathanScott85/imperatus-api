generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model File {
  id          Int            @id @default(autoincrement())
  url         String
  key         String
  fileName    String         @unique
  contentType String
  createdAt   DateTime       @default(now())
  category    Category?      @relation("CategoryImage")
  brand       ProductBrands? @relation("BrandImage")
  product     Product?       @relation("ProductImage")
  carousel    CarouselPage?  @relation("CarouselImage")
  promotion   Promotion?     @relation("PromotionImage")
}

model CarouselPages {
  id          String   @id @default(cuid())
  pages       CarouselPage[] @relation("CarouselPages")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CarouselPage {
  id           String         @id @default(cuid())
  title        String
  description  String?
  img          File?          @relation("CarouselImage", fields: [imgId], references: [id])
  imgId        Int?           @unique
  carouselPageId String?
  carouselPage CarouselPages? @relation("CarouselPages", fields: [carouselPageId], references: [id])
  brandId      Int?
  brand        ProductBrands? @relation("CarouselBrands", fields: [brandId], references: [id])
  productId    Int?
  product      Product?       @relation("CarouselProduct", fields: [productId], references: [id])
  disabled     Boolean?       @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Promotion {
  id          Int       @id @default(autoincrement())
  title       String
  imgId       Int?           @unique
  img         File?       @relation("PromotionImage", fields: [imgId], references: [id])
  description String
  slug        String?    @unique
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CategoryType {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  categories Category[]
}

model Category {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String
  imgId          Int?         @unique
  categoryTypeId Int          @default(autoincrement())
  type           CategoryType @relation(fields: [categoryTypeId], references: [id])
  img            File?        @relation("CategoryImage", fields: [imgId], references: [id])
  products       Product[]    @relation("CategoryProducts")
}

model Rarity {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  ProductRarity[]
}

model ProductVariant {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
}

model ProductType {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model CardType {
  id        Int            @id @default(autoincrement())
  name      String
  brandId   Int
  brand     ProductBrands? @relation("BrandCardTypes", fields: [brandId], references: [id])
  products  Product[]      @relation("ProductCardType")
}

model ProductBrands {
  id          Int            @id @default(autoincrement())
  imgId       Int?           @unique
  name        String         @unique
  description String
  img         File?          @relation("BrandImage", fields: [imgId], references: [id])
  product     Product[]
  carousels   CarouselPage[] @relation("CarouselBrands")
  cardTypes   CardType[]     @relation("BrandCardTypes")
}

model ProductSet {
  id          Int       @id @default(autoincrement())
  setName     String    @unique
  description String
  setCode     String    @unique
  product     Product[]
}

model Product {
  id            Int           @id @default(autoincrement())
  categoryId    Int
  brandId       Int
  setId         Int?
  imgId         Int?          @unique
  name          String
  price         Decimal?      @db.Decimal(10, 2)
  preorder      Boolean?
  rrp           Decimal?      @db.Decimal(10, 2)
  description   String
  slug          String?       @unique
  productTypeId Int
  variantId     Int?
  cardTypeId    Int?
  stock         Stock?        @relation("ProductStock")
  brand         ProductBrands @relation(fields: [brandId], references: [id])
  category      Category      @relation("CategoryProducts", fields: [categoryId], references: [id])
  img           File?         @relation("ProductImage", fields: [imgId], references: [id])
  type          ProductType   @relation(fields: [productTypeId], references: [id])
  set           ProductSet?    @relation(fields: [setId], references: [id])
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  rarities      ProductRarity[]
  cardType      CardType?     @relation("ProductCardType", fields: [cardTypeId], references: [id])
  carouselPages CarouselPage[] @relation("CarouselProduct")

  @@map("products")
  @@index([categoryId])
  @@index([brandId])
  @@index([setId])
  @@index([productTypeId])
  @@index([variantId])
  @@index([cardTypeId])
}

model ProductRarity {
  productId Int
  rarityId  Int
  product Product @relation(fields: [productId], references: [id])
  rarity  Rarity  @relation(fields: [rarityId], references: [id])

  @@id([productId, rarityId])
}

model Stock {
  id        Int     @id @default(autoincrement())
  amount    Int
  sold      Int
  instock   String
  soldout   String
  preorder  Boolean
  productId Int     @unique
  product   Product @relation("ProductStock", fields: [productId], references: [id])
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  fullname                String
  password                String
  dob                     DateTime
  phone                   String
  address                 String
  city                    String
  postcode                String
  resetToken              String?
  resetTokenExpiry        DateTime?
  emailVerified           Boolean                  @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  refreshToken            String?
  refreshTokenExpiry      DateTime?
  storeCredit             Float                    @default(0.0)
  transactions            StoreCreditTransaction[]
  userRoles               UserRole[]               @relation("UserRoles")
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[] @relation("UserRoles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  role   Role @relation("UserRoles", fields: [roleId], references: [id])
  user   User @relation("UserRoles", fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model StoreCreditTransaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  date         DateTime
  time         String
  type         String
  amount       Decimal  @db.Decimal(10, 2)
  balanceAfter Decimal  @db.Decimal(10, 2)
  User         User     @relation(fields: [userId], references: [id])
}
