generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ShippingProvider {
  id        Int              @id @default(autoincrement())
  name      String
  options   ShippingOption[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model ShippingOption {
  id            Int              @id @default(autoincrement())
  name          String
  cost          Float
  estimatedDays Int
  description   String?
  isActive      Boolean          @default(true)
  providerId    Int
  provider      ShippingProvider @relation(fields: [providerId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ApplicationSettings {
  id          Int     @id @default(1)
  comingSoon  Boolean @default(false)
  maintenance Boolean @default(false)
}

model File {
  id          Int            @id @default(autoincrement())
  url         String
  key         String
  fileName    String         @unique
  contentType String
  createdAt   DateTime       @default(now())
  carousel    CarouselPage?  @relation("CarouselImage")
  category    Category?      @relation("CategoryImage")
  brand       ProductBrands? @relation("BrandImage")
  promotion   Promotion?     @relation("PromotionImage")
  product     Product?       @relation("ProductImage")
}

model CarouselPages {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  pages     CarouselPage[] @relation("CarouselPages")
}

model CarouselPage {
  id             String         @id @default(cuid())
  title          String?
  description    String?
  buttonText     String?
  imgId          Int?           @unique
  carouselPageId String?
  brandId        Int?
  productId      Int?
  disabled       Boolean?       @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  brand          ProductBrands? @relation("CarouselBrands", fields: [brandId], references: [id])
  carouselPage   CarouselPages? @relation("CarouselPages", fields: [carouselPageId], references: [id])
  img            File?          @relation("CarouselImage", fields: [imgId], references: [id])
  product        Product?       @relation("CarouselProduct", fields: [productId], references: [id])
}

model Promotion {
  id          Int      @id @default(autoincrement())
  title       String
  imgId       Int?     @unique
  description String
  slug        String?  @unique
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  img         File?    @relation("PromotionImage", fields: [imgId], references: [id])
}

model CategoryType {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  categories Category[]
}

model Category {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  slug           String?         @unique
  description    String
  imgId          Int?            @unique
  categoryTypeId Int             @default(autoincrement())
  type           CategoryType    @relation(fields: [categoryTypeId], references: [id])
  img            File?           @relation("CategoryImage", fields: [imgId], references: [id])
  products       Product[]       @relation("CategoryProducts")
  brands         ProductBrands[] @relation("CategoryBrands")
  rarities       Rarity[]        @relation("CategoryRarities")
  sets           ProductSet[]    @relation("CategorySets")
}

model Rarity {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  products   Product[]
  categories Category[] @relation("CategoryRarities")
}

model ProductVariant {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model ProductType {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model CardType {
  id       Int           @id @default(autoincrement())
  name     String
  brandId  Int
  brand    ProductBrands @relation("BrandCardTypes", fields: [brandId], references: [id])
  products Product[]     @relation("ProductCardType")
}

model ProductBrands {
  id          Int            @id @default(autoincrement())
  imgId       Int?           @unique
  name        String         @unique
  description String
  cardTypes   CardType[]     @relation("BrandCardTypes")
  carousels   CarouselPage[] @relation("CarouselBrands")
  img         File?          @relation("BrandImage", fields: [imgId], references: [id])
  sets        ProductSet[]   @relation("ProductBrandSets")
  product     Product[]
  categories  Category[]     @relation("CategoryBrands")
}

model ProductSet {
  id          Int           @id @default(autoincrement())
  setName     String        @unique
  description String
  setCode     String        @unique
  brandId     Int
  brand       ProductBrands @relation("ProductBrandSets", fields: [brandId], references: [id])
  product     Product[]
  categories  Category[]    @relation("CategorySets")
}

model Product {
  id            Int             @id @default(autoincrement())
  categoryId    Int
  brandId       Int
  setId         Int?
  imgId         Int?            @unique
  name          String
  price         Decimal?        @db.Decimal(10, 2)
  preorder      Boolean?
  rrp           Decimal?        @db.Decimal(10, 2)
  description   String
  slug          String?
  productTypeId Int
  variantId     Int?
  cardTypeId    Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  rarityId      Int?
  carouselPages CarouselPage[]  @relation("CarouselProduct")
  stock         Stock?          @relation("ProductStock")
  brand         ProductBrands   @relation(fields: [brandId], references: [id])
  cardType      CardType?       @relation("ProductCardType", fields: [cardTypeId], references: [id])
  category      Category        @relation("CategoryProducts", fields: [categoryId], references: [id])
  img           File?           @relation("ProductImage", fields: [imgId], references: [id])
  type          ProductType     @relation(fields: [productTypeId], references: [id])
  rarity        Rarity?         @relation(fields: [rarityId], references: [id])
  set           ProductSet?     @relation(fields: [setId], references: [id])
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  orderItems    OrderItem[]

  @@index([categoryId])
  @@index([brandId])
  @@index([setId])
  @@index([productTypeId])
  @@index([variantId])
  @@index([cardTypeId])
  @@map("products")
}

model Stock {
  id        Int     @id @default(autoincrement())
  amount    Int
  sold      Int
  instock   String
  soldout   String
  preorder  Boolean
  productId Int     @unique
  product   Product @relation("ProductStock", fields: [productId], references: [id])
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  fullname                String
  password                String
  dob                     DateTime
  phone                   String
  address                 String
  city                    String
  postcode                String
  resetToken              String?
  resetTokenExpiry        DateTime?
  emailVerified           Boolean                  @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  refreshToken            String?
  refreshTokenExpiry      DateTime?
  storeCredit             Float                    @default(0.0)
  transactions            StoreCreditTransaction[]
  userRoles               UserRole[]               @relation("UserRoles")
  orders                  Order[]
}

model Order {
  id               Int           @id @default(autoincrement())
  orderNumber      String        @unique
  userId           Int?
  user             User?         @relation(fields: [userId], references: [id])
  status           String        @default("pending")
  subtotal         Decimal       @db.Decimal(10, 2)
  shippingCost     Decimal       @db.Decimal(10, 2)
  vat              Decimal       @db.Decimal(10, 2)
  firstOrder       Boolean       @default(false)
  discountCodeId   Int?
  discountCode     DiscountCode? @relation(fields: [discountCodeId], references: [id])
  total            Decimal       @db.Decimal(10, 2)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  items            OrderItem[]
  email            String
  name             String
  address          String
  city             String
  postcode         String
  phone            String
  trackingNumber   String?
  trackingProvider String?
  VATRecord        VATRecord[]
  statusUpdates    OrderStatus[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

model VATRecord {
  id          Int      @id @default(autoincrement())
  orderId     Int
  orderNumber String
  vatAmount   Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  status    String
  note      String?
  createdAt DateTime @default(now())
}

model Status {
  id    Int    @id @default(autoincrement())
  value String @unique
  label String
}

model DiscountCode {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  type        String
  isAffiliate Boolean   @default(false)
  value       Decimal   @db.Decimal(10, 2)
  active      Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[] @relation("UserRoles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  role   Role @relation("UserRoles", fields: [roleId], references: [id])
  user   User @relation("UserRoles", fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model StoreCreditTransaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  date         DateTime
  time         String
  type         String
  amount       Decimal  @db.Decimal(10, 2)
  balanceAfter Decimal  @db.Decimal(10, 2)
  User         User     @relation(fields: [userId], references: [id])
}
